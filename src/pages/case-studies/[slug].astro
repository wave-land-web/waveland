---
import type { SanityDocument } from '@sanity/client'
import IntroCallCTA from '../../components/text/IntroCallCTA.astro'
import Pill from '../../components/text/Pill.astro'
import PortableText from '../../components/text/PortableText.astro'
import SanityImage from '../../components/ui/SanityImage.astro'
import Layout from '../../layouts/Layout.astro'
import { loadQuery } from '../../sanity/lib/load-query'
import CTA from '../../components/text/CTA.astro'

export async function getStaticPaths() {
  const { data: allCaseStudies } = await loadQuery<SanityDocument[]>({
    query: `*[_type == "case-study"] | order(publishedAt asc)`,
  })

  return allCaseStudies.map((caseStudy) => {
    return {
      params: {
        slug: caseStudy.slug.current,
      },
    }
  })
}

// Get page data and props
const { params } = Astro

// Load the current post
const { data: currentCaseStudy } = await loadQuery<SanityDocument>({
  query: `*[_type == "case-study" && slug.current == $slug][0] {
    title,
    slug,
    mainImage,
    publishedAt,
    description,
    services,
    body
  }`,
  params,
})

// Retrieve + format heading data for anchor links and table of contents
const headings: { id: string; text: string }[] = currentCaseStudy.body
  .filter((block: SanityDocument) => block.style === 'h2')
  .map((heading: SanityDocument) => {
    return {
      id: heading.children[0].text.replace(/\s+/g, '-').toLowerCase(),
      text: heading.children[0].text,
    }
  })
---

<Layout
  title={`Wave Land Web | ${currentCaseStudy.title}`}
  description={currentCaseStudy.description}
>
  <header
    class="max-w-screen-3xl grid lg:grid-cols-2 gap-16 lg:gap-40 items-center pt-[calc(4rem+var(--nav-height))] pb-16 md:pb-28 border-b-[1px] border-dashed border-grey"
  >
    <div class="flex flex-col gap-4 lg:gap-6">
      <p class="font-header text-purple text-base lg:text-lg lsa lsa-slide-left no-repeat">
        Case Study
      </p>
      <h1 class="lsa lsa-slide-left delay-100 no-repeat">
        {currentCaseStudy.title}
      </h1>
      <div class="flex flex-wrap gap-2">
        {
          currentCaseStudy.services.map((service: string) => (
            <Pill
              text={`${service}`}
              size="small"
              class:list={[
                { 'bg-purple delay-200': service === 'Web Design & Development' },
                { 'bg-orange delay-300': service === 'Digital Strategy' },
                { 'bg-green delay-500': service === 'UX/UI' },
                ['lsa lsa-slide-left no-repeat'],
              ]}
            />
          ))
        }
      </div>
    </div>

    <SanityImage
      image={currentCaseStudy.mainImage}
      alt={currentCaseStudy.mainImage.alt}
      class="aspect-video lsa lsa-slide-right no-repeat"
    />
  </header>

  <main class="max-w-screen-3xl flex flex-col gap-[1lh]">
    <section id="case-study" class="w-full grid lg:gap-40 lg:grid-cols-2">
      <nav
        aria-label="Case Study Table of Contents"
        class="w-full hidden lg:block lg:sticky lg:top-[var(--nav-height)] lg:self-start p-0"
      >
        <ul class="w-fit">
          {
            headings.map((heading: { id: string; text: string }) => (
              <li class="font-header group" data-section-id={heading.id}>
                <a href={`#${heading.id}`} class="inline-flex items-center">
                  <span class="inline-block mr-4 h-[2px] w-8 bg-grey group-hover:w-16 group-hover:h-1 group-hover:bg-green group-focus-visible:w-16 group-focus-visible:h-1 group-focus-visible:bg-green group-[.active]:w-16 group-[.active]:h-1 group-[.active]:bg-green rounded transition-all duration-200 ease-in-out" />
                  <span class="text-grey group-hover:text-green group-focus-visible:text-green group-[.active]:text-green transition-all duration-200 ease-in-out">
                    {heading.text}
                  </span>
                </a>
              </li>
            ))
          }
        </ul>
      </nav>

      <div class="flex flex-col gap-[1lh]">
        <PortableText portableText={currentCaseStudy.body} />
        <CTA text="View All Case Studies" url="/case-studies" arrowLeft={true} />
      </div>
    </section>

    <section id="get-started">
      <IntroCallCTA
        title="Get Started"
        description="Ready for the next step? Schedule a complimentary strategy session or send us an email to discuss your project."
        linkText="Free Intro Call"
        linkSrc="https://calendly.com/wavelandweb/15-min-meeting"
      />
    </section>
  </main>
</Layout>

<script is:inline define:vars={{ headings }}>
  /**
   * Animate table of contents menu items when the corresponding section comes into view
   */
  function handleAnimations() {
    if (!window.IntersectionObserver) {
      return console.log('IntersectionObserver not supported')
    }

    const headingSections = headings.map((heading) => document.getElementById(heading.id))

    if (headingSections.length !== 0) {
      const options = {
        root: null,
        rootMargin: '0px',
        threshold: 0,
      }

      // Initialize observer
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          const section = entry.target
          const activeMenuItem = document.querySelector(`nav li[data-section-id="${section.id}"]`)

          // By default, animations repeat on scroll
          if (entry.isIntersecting) {
            activeMenuItem.classList.add('active')
          } else if (!entry.isIntersecting) {
            activeMenuItem.classList.remove('active')
          }
        })
      }, options)

      // Observe each section starting with an h2
      headingSections.forEach((section) => observer.observe(section))
    }
  }

  // Handle animations on page load
  document.addEventListener('DOMContentLoaded', () => {
    handleAnimations()

    // Handle animations on scroll
    document.addEventListener('scroll', handleAnimations)
  })
</script>
