---
import type { SanityDocument } from '@sanity/client'
import CTA from '../../components/text/CTA.astro'
import PortableText from '../../components/text/PortableText.astro'
import PostHeader from '../../components/ui/PostHeader.astro'
import Layout from '../../layouts/Layout.astro'
import { loadQuery } from '../../sanity/lib/load-query'

export async function getStaticPaths() {
  const { data: allPosts } = await loadQuery<SanityDocument[]>({
    query: `*[_type == "post"] | order(publishedAt asc)`,
  })

  return allPosts.map((post) => {
    return {
      params: {
        slug: post.slug.current,
      },
      props: {
        allPosts,
      },
    }
  })
}

// Get page data and props
const { params, props } = Astro

// Load the current post
const { data: currentPost } = await loadQuery<SanityDocument>({
  query: `*[_type == "post" && slug.current == $slug][0] {
    title,
    publishedAt,
    description,
    mainImage,
    body,
    "estimatedReadingTime": round(length(pt::text(body)) / 5 / 180 )
  }`,
  params,
})

// Pagination: previous and next post
const currentPostIndex = props.allPosts.findIndex((p) => p.slug.current === params.slug)
const previousPost = props.allPosts[currentPostIndex - 1] || null
const nextPost = props.allPosts[currentPostIndex + 1] || null
---

<Layout title={`Wave Land Web | ${currentPost.title}`} description={currentPost.description}>
  <main id="blog-layout" class="max-w-4xl flex flex-col gap-[1lh] mb-16 md:mb-24">
    <PostHeader
      image={currentPost.mainImage}
      imageAlt={currentPost.mainImage.alt}
      title={currentPost.title}
      published={currentPost.publishedAt}
      minutesRead={currentPost.estimatedReadingTime}
    />

    <section id="post" class="flex flex-col gap-[1lh] py-0">
      <PortableText portableText={currentPost.body} />

      <!-- Pagination + Nav to blog link -->
      <div class="flex flex-wrap gap-8 justify-between mt-[1lh]">
        {
          previousPost && (
            <a
              class="mr-auto site-button"
              href={`/blog/${previousPost.slug.current}`}
              title={previousPost.title}
            >
              Previous Post
            </a>
          )
        }
        {
          nextPost && (
            <a
              class="ml-auto site-button"
              href={`/blog/${nextPost.slug.current}`}
              title={nextPost.title}
            >
              Next Post
            </a>
          )
        }
      </div>
      <CTA text="Back to blog" url="/blog" arrowLeft={true} linkClass="my-4" />
    </section>
  </main>
</Layout>
