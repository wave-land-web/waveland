---
import Footer from '../components/Footer.astro'
import Navigation from '../components/navigation/Navigation.astro'
import '../styles/global.css'

export interface Props {
  title: string
  description?: string
  socialImage?: string
}

const { title, description, socialImage } = Astro.props
const canonicalURL = new URL(Astro.url.pathname, Astro.site)
const socialImageURL = new URL(socialImage || '/images/gradient.jpg', canonicalURL)
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!-- SEO -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />
    <link rel="canonical" href={canonicalURL} />
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- Facebook -->
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={socialImageURL} />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:domain" content="wavelandweb.com" />
    <meta name="twitter:url" content={canonicalURL} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={socialImageURL} />

    <!-- Preload Fonts -->
    <link
      rel="preload"
      href="/fonts/poppins-regular.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/monaspace-argon-var-regular.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />

    <!-- Favicon & Theme -->
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="msapplication-TileColor" content="#0e1726" media="(prefers-color-scheme: dark)" />
    <meta name="msapplication-TileColor" content="#fffafa" media="(prefers-color-scheme: light)" />
    <meta name="theme-color" content="#0e1726" media="(prefers-color-scheme: dark)" />
    <meta name="theme-color" content="#fffafa" media="(prefers-color-scheme: light)" />

    <!-- RSS Feed -->
    <link
      rel="alternate"
      type="application/rss+xml"
      title="RSS Feed for Wave Land Web"
      href={`${Astro.site}rss.xml`}
    />

    <!-- Umami Analytics -->
    <script
      type="text/partytown"
      is:inline
      defer
      src="https://cloud.umami.is/script.js"
      data-website-id="f9a6bc9a-34fd-4f65-97ed-e097f7bf9ff2"></script>
  </head>

  <body>
    <Navigation />
    <slot />
    <Footer />
  </body>
</html>

<script is:inline>
  /**
   * Set the theme based on the user's preferences
   */
  const theme = (() => {
    // Check if localStorage exists and return the value
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme')
    }

    // Check if the user display settings are dark or light
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark'
    } else if (window.matchMedia('(prefers-color-scheme: light)').matches) {
      return 'light'
    }
  })()

  if (theme === 'light') {
    // set the theme to light
    document.documentElement.classList.remove('dark')
  } else {
    // set the theme to dark
    document.documentElement.classList.add('dark')
  }

  // save the theme in localStorage
  window.localStorage.setItem('theme', theme ?? '')
</script>

<script is:inline data-astro-rerun>
  /**
   * Fade in sections with the class `aos` when they come into view
   */
  function handleSectionFadeOnScroll() {
    if (!window.IntersectionObserver) {
      return console.log('IntersectionObserver not supported')
    }

    const sections = document.querySelectorAll('.aos')

    if (sections.length !== 0) {
      const options = {
        root: null,
        rootMargin: '0px',
        threshold: 0.25,
      }

      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const section = entry.target
            section.classList.add('active')
          }
        })
      }, options)

      sections.forEach((section) => observer.observe(section))
    }
  }

  // On page load
  document.addEventListener('DOMContentLoaded', () => {
    // Fade in sections on load
    handleSectionFadeOnScroll()

    // Fade in sections on scroll
    document.addEventListener('scroll', handleSectionFadeOnScroll)
  })
</script>
