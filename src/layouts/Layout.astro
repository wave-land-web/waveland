---
import { ViewTransitions } from 'astro:transitions'
import Footer from '../components/Footer.astro'
import Navigation from '../components/navigation/Navigation.astro'
import '../styles/global.css'

export interface Props {
  title: string
  description?: string
  socialImage?: string
}

const { title, description, socialImage } = Astro.props

const theme = Astro.cookies.get('theme')?.value ?? ''
const canonicalURL = new URL(Astro.url.pathname, Astro.site)
const socialImageURL = new URL(socialImage || '/images/gradient.jpg', canonicalURL)
---

<html lang="en" class={theme}>
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <!-- SEO -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />
    <link rel="canonical" href={canonicalURL} />

    <!-- Facebook -->
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={socialImageURL} />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:domain" content="wavelandweb.com" />
    <meta name="twitter:url" content={canonicalURL} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={socialImageURL} />

    <!-- Favicon & Theme -->

    <!-- Animations -->
    <ViewTransitions />
  </head>

  <body>
    <Navigation />
    <slot />
    <Footer />
    <script data-astro-rerun>
      /**
       * Fade in sections with the class `aos-fade` when they come into view
       */
      function handleSectionFadeOnScroll() {
        if (!window.IntersectionObserver) {
          return console.log('IntersectionObserver not supported')
        }

        const sections = document.querySelectorAll('.aos-fade')

        if (sections.length !== 0) {
          const options = {
            root: null,
            rootMargin: '0px',
            threshold: 0.25,
          }

          const observer = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                const section = entry.target
                section.classList.add('active')
              }
            })
          }, options)

          sections.forEach((section) => observer.observe(section))
        }
      }

      /**
       * When page loads, fade in sections with the class `aol-fade`
       */
      function handleSectionFadeOnLoad() {
        const sections = document.querySelectorAll('.aol-fade')
        sections.forEach((section) => section.classList.add('active'))
      }

      // On page load
      document.addEventListener('astro:page-load', () => {
        // Fade in sections on load
        handleSectionFadeOnLoad()

        // Fade in sections on scroll
        document.addEventListener('scroll', handleSectionFadeOnScroll)
      })
    </script>
  </body>
</html>
