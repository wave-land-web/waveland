---
import CTA from '../text/CTA.tsx'

export interface Props {
  formId: string
}

const { formId } = Astro.props
---

<form id={formId} method="POST" class="w-full max-w-120" data-netlify="true">
  <div class="flex gap-2 mb-2">
    <label for="email" class="sr-only">Email Address</label>
    <input
      id="email"
      class="block w-full backdrop-blur-sm bg-white/1 border border-dashed border-darkGrey hover:border-purple rounded-lg px-4 py-3 shadow-md transition duration-(--transition) focus:outline-none focus:border-purple"
      name="email"
      type="email"
      autocomplete="email"
      placeholder="Email Address"
      required
    />
    <CTA tag="button" text="Subscribe" aria-label="Subscribe" title="Subscribe" class="text-base" />
  </div>
  <span id="response" class="hidden text-xs">
    <!-- Form submission response handled via JS -->
  </span>
</form>

<script is:inline define:vars={{ formId }}>
  const form = document.querySelector(`#${formId}`)
  const responseMessage = form?.querySelector('#response')

  /**
   * Handle UI messages based on submission state
   * @param {String} state - 'loading', 'error', 'success'
   * @param {String} message - Message to display
   */
  function handleMessageUI(state, message) {
    const errorClasses = ['text-orange']
    const successClasses = ['text-green']

    // Reset styles
    responseMessage.classList.remove('hidden')
    responseMessage.classList.remove(...errorClasses)
    responseMessage.classList.remove(...successClasses)

    // Set message text based on API response
    responseMessage.textContent = message

    // Set message color based on state
    if (state === 'error') {
      responseMessage.classList.add(...errorClasses)
    } else if (state === 'success') {
      responseMessage.classList.add(...successClasses)
    }
  }

  /**
   * Handle email subscription form submission
   * @param e Form submission event
   */
  async function submit(e) {
    e.preventDefault()

    // Show loading message
    handleMessageUI('loading', 'Subscribing...')

    // Get form data and send to API
    const formData = new FormData(e.target)
    const response = await fetch('/api/subscribe.json/', {
      method: 'POST',
      body: formData,
    })
    const data = await response.json()

    // Error
    if (data.error) {
      handleMessageUI('error', data.error)
    }

    // Success
    if (data.message) {
      handleMessageUI('success', data.message)
    }

    form?.reset()
  }

  // Submit event listener
  form?.addEventListener('submit', submit)
</script>
